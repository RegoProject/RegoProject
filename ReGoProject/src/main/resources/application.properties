
# port  
server.port=8087

# context-path 설정 안할것 -> 인덱스.html 동작방해


# ViewResolver
# return은 WEB-INF 아래에 있는 원하는 폴더명/JSP파일명 으로 해주면 됩니다.
spring.mvc.view.prefix=/WEB-INF/
spring.mvc.view.suffix=.jsp


# DataBase Connection Pool 
# HikariCP 
# MySQL Driver -> log4jdb로 변경
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
# jdbc URL 
spring.datasource.url=jdbc:log4jdbc:mysql://project-db-cgi.smhrd.com:3307/REGO

log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator
log4jdbc.dump.sql.maxlinelength=0

# DB 아이디
spring.datasource.username=REGO

# DB 비번
spring.datasource.password=940412

# JPA JDBC 
# hibernate-core mysql모든버전
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# DDL-auto : 처음에는 create로 두다가, 개발이 어느정도 되면 update로 수정
# create : 기존에 있던 테이블 drop하고 다시 생성
# update : 변경사항이 있을 때만, drop 하고 다시 생성
spring.jpa.hibernate.ddl-auto=update

# 자동완성된 SQL 쿼리를 콘솔창에 출력
spring.jpa.show-sql=true

# 실제 입력한 값들을 sql에 집어넣어서 출력시키겠다.
spring.jpa.properties.hibernate.format_sql=true

# 엔티티안의 필드의 컬럼명을 카멜식으로 바꿔주는거
spring.jpa.properties.hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


# 파일 업로드 활성화
spring.servlet.multipart.enabled=true

# 최대 파일 크기 제한: 10MB
spring.servlet.multipart.max-file-size=10MB

# 전체 요청 크기 제한: 10MB
spring.servlet.multipart.max-request-size=10MB


# 마이바티스 관련 설정
mybatis.mapper-locations=mapper/*.xml

spring.devtools.livereload.enabled=true
